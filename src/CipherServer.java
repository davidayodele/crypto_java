import java.io.*;
import java.net.*;
import java.security.*;
import java.util.Arrays;
import javax.crypto.*;

public class CipherServer
{
    public static void main(String[] args) throws Exception
    {
        int port = 7999;
        ServerSocket server = new ServerSocket(port);
        Socket s = server.accept();

        // YOU NEED TO DO THESE STEPS:
        // -Read the key from the file generated by the client.
        // -Use the key to decrypt the incoming message from socket s.
        // -Print out the decrypt String to see if it matches the orignal message.

        byte msgBytes[] = new byte[1024];
        byte buffer;
        int i = 0;

        // -Read the key from the file generated by the client.
        FileInputStream fis = new FileInputStream("Key.dat");
        ObjectInputStream in = new ObjectInputStream(fis);
        Key key = (Key) in.readObject();
        in.close();
        fis.close();

        // -Use the key to decrypt the incoming message from socket s.

        Cipher cipher = Cipher.getInstance("DES/ECB/PKCS5Padding");
        cipher.init(Cipher.DECRYPT_MODE, key);

        CipherInputStream cipher_in = new CipherInputStream(s.getInputStream(), cipher);
        while ((buffer = (byte) cipher_in.read()) > 0) {
            msgBytes[i++] = buffer;
        }

        cipher_in.close();
        s.close();

        for (i = 0; i < msgBytes.length; i++) {
            if (msgBytes[i] == 0) {
                msgBytes = Arrays.copyOf(msgBytes, i);
                break;
            }
        }
        // -Print out the decrypted String to see if it matches the orignal message
        String msg = new String(msgBytes, "UTF-8");
        System.out.println(msg);
        String keyfile = "Key.dat";

        // Overwrites current key file
        File f = new File(keyfile);
        if (f.exists()){
            f.delete();
        }
    }
}